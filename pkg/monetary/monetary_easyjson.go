// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package monetary

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson194bc38dDecodeGithubComPedroPessoaChallengeBravoPkgMonetary(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "max_units":
			out.MaxUnits = int(in.Int())
		case "thousands_splitter":
			out.ThousandsSplitter = string(in.String())
		case "decimal_splitter":
			out.DecimalSplitter = string(in.String())
		case "fixed_exchange_rate_int_part":
			if in.IsNull() {
				in.Skip()
				out.FixedExchangeRateIntPart = nil
			} else {
				if out.FixedExchangeRateIntPart == nil {
					out.FixedExchangeRateIntPart = new(int64)
				}
				*out.FixedExchangeRateIntPart = int64(in.Int64())
			}
		case "fixed_exchange_rate_decimal_part":
			if in.IsNull() {
				in.Skip()
				out.FixedExchangeRateDecimalPart = nil
			} else {
				if out.FixedExchangeRateDecimalPart == nil {
					out.FixedExchangeRateDecimalPart = new(int64)
				}
				*out.FixedExchangeRateDecimalPart = int64(in.Int64())
			}
		case "standard":
			out.Standard = currencyStandard(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson194bc38dEncodeGithubComPedroPessoaChallengeBravoPkgMonetary(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"max_units\":"
		out.RawString(prefix)
		out.Int(int(in.MaxUnits))
	}
	{
		const prefix string = ",\"thousands_splitter\":"
		out.RawString(prefix)
		out.String(string(in.ThousandsSplitter))
	}
	{
		const prefix string = ",\"decimal_splitter\":"
		out.RawString(prefix)
		out.String(string(in.DecimalSplitter))
	}
	{
		const prefix string = ",\"fixed_exchange_rate_int_part\":"
		out.RawString(prefix)
		if in.FixedExchangeRateIntPart == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.FixedExchangeRateIntPart))
		}
	}
	{
		const prefix string = ",\"fixed_exchange_rate_decimal_part\":"
		out.RawString(prefix)
		if in.FixedExchangeRateDecimalPart == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.FixedExchangeRateDecimalPart))
		}
	}
	{
		const prefix string = ",\"standard\":"
		out.RawString(prefix)
		out.String(string(in.Standard))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson194bc38dEncodeGithubComPedroPessoaChallengeBravoPkgMonetary(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson194bc38dEncodeGithubComPedroPessoaChallengeBravoPkgMonetary(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson194bc38dDecodeGithubComPedroPessoaChallengeBravoPkgMonetary(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson194bc38dDecodeGithubComPedroPessoaChallengeBravoPkgMonetary(l, v)
}
